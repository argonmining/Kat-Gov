openapi: 3.0.0
info:
  title: Kat Gov API
  description: API documentation for the Kat Gov governance application.
  version: 1.0.0
servers:
  - url: https://govapi.nachowyborski.xyz/api
    description: Production server

paths:
  # Proposal Routes
  /proposals:
    post:
      summary: Submit a new proposal
      description: Creates a new governance proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalSubmission'
      responses:
        '201':
          description: Proposal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Retrieve all proposals
      description: Gets a list of proposals with optional filtering
      parameters:
        - name: status
          in: query
          description: Filter by status name
          schema:
            type: string
        - name: title
          in: query
          description: Filter by proposal title (partial match)
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field (e.g., submitted, title)
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            default: 100
        - name: offset
          in: query
          description: Number of records to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of proposals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal'
        '500':
          $ref: '#/components/responses/InternalError'

  /proposals/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Proposal ID
        schema:
          type: integer
    
    get:
      summary: Get proposal by ID
      responses:
        '200':
          description: Proposal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: Update proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalUpdate'
      responses:
        '200':
          description: Updated proposal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete proposal
      responses:
        '204':
          description: Proposal deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /proposals/{id}/votes:
    get:
      summary: Get votes for a specific proposal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of votes for the proposal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalVote'

  # Proposal Status Routes
  /proposals/statuses:
    get:
      summary: Get all proposal statuses
      description: Retrieves a list of all possible proposal statuses
      responses:
        '200':
          description: List of proposal statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalStatus'
    post:
      summary: Create proposal status
      description: Creates a new proposal status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalStatusSubmission'
      responses:
        '201':
          description: Status created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalStatus'

  /proposals/statuses/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update proposal status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalStatusUpdate'
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalStatus'
    delete:
      summary: Delete proposal status
      responses:
        '204':
          description: Status deleted successfully

  # Proposal Type Routes
  /proposals/types:
    get:
      summary: Get all proposal types
      description: Retrieves a list of all possible proposal types
      responses:
        '200':
          description: List of proposal types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalType'
    post:
      summary: Create proposal type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalTypeSubmission'
      responses:
        '201':
          description: Type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalType'

  /proposals/types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update proposal type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalTypeUpdate'
      responses:
        '200':
          description: Type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalType'
    delete:
      summary: Delete proposal type
      responses:
        '204':
          description: Type deleted successfully

  # Proposal Snapshot Routes
  /proposals/snapshots:
    get:
      summary: Get all proposal snapshots
      description: Retrieves a list of all proposal snapshots
      responses:
        '200':
          description: List of proposal snapshots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalSnapshot'
    post:
      summary: Create proposal snapshot
      description: Creates a new snapshot of proposal data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalSnapshotSubmission'
      responses:
        '201':
          description: Snapshot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSnapshot'

  /proposals/snapshots/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update proposal snapshot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalSnapshotUpdate'
      responses:
        '200':
          description: Snapshot updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalSnapshot'
    delete:
      summary: Delete proposal snapshot
      responses:
        '204':
          description: Snapshot deleted successfully

  # Proposal Vote Routes
  /proposals/votes:
    post:
      summary: Submit a vote on a proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalVoteSubmission'
      responses:
        '201':
          description: Vote submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalVote'

  /proposals/yes-votes:
    get:
      summary: Get all yes votes
      description: Retrieves a list of all yes votes across proposals
      responses:
        '200':
          description: List of yes votes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalYesVote'
    post:
      summary: Submit a yes vote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalYesVoteSubmission'
      responses:
        '201':
          description: Yes vote submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalYesVote'

  /proposals/yes-votes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update yes vote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalYesVoteUpdate'
      responses:
        '200':
          description: Yes vote updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalYesVote'
    delete:
      summary: Delete yes vote
      responses:
        '204':
          description: Yes vote deleted successfully

  /proposals/no-votes:
    get:
      summary: Get all no votes
      description: Retrieves a list of all no votes across proposals
      responses:
        '200':
          description: List of no votes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalNoVote'
    post:
      summary: Submit a no vote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalNoVoteSubmission'
      responses:
        '201':
          description: No vote submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalNoVote'

  /proposals/no-votes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update no vote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalNoVoteUpdate'
      responses:
        '200':
          description: No vote updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalNoVote'
    delete:
      summary: Delete no vote
      responses:
        '204':
          description: No vote deleted successfully

  # Election Routes
  /elections:
    post:
      summary: Submit new election
      description: Creates a new election
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionSubmission'
      responses:
        '201':
          description: Election created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Election'
    get:
      summary: Get all elections
      description: Retrieves a list of all elections
      parameters:
        - name: status
          in: query
          description: Filter by status name
          schema:
            type: string
        - name: type
          in: query
          description: Filter by election type
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of elections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Election'

  /elections/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    delete:
      summary: Delete election
      responses:
        '204':
          description: Election deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # Election Type Routes
  /elections/types:
    get:
      summary: Get all election types
      responses:
        '200':
          description: List of election types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElectionType'
    post:
      summary: Create election type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionTypeSubmission'
      responses:
        '201':
          description: Election type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionType'

  /elections/types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update election type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionTypeUpdate'
      responses:
        '200':
          description: Election type updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionType'
    delete:
      summary: Delete election type
      responses:
        '204':
          description: Election type deleted successfully

  # Election Status Routes
  /elections/statuses:
    get:
      summary: Get all election statuses
      responses:
        '200':
          description: List of election statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ElectionStatus'
    post:
      summary: Create election status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionStatusSubmission'
      responses:
        '201':
          description: Election status created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionStatus'

  /elections/statuses/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update election status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionStatusUpdate'
      responses:
        '200':
          description: Election status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectionStatus'
    delete:
      summary: Delete election status
      responses:
        '204':
          description: Election status deleted successfully

  # Candidate Routes
  /candidates/votes:
    post:
      summary: Submit candidate vote
      description: Submit a vote for a candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - candidateId
                - walletId
                - amount
              properties:
                candidateId:
                  type: integer
                walletId:
                  type: integer
                amount:
                  type: number
      responses:
        '201':
          description: Vote submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateVote'

  /candidates/{candidateId}/votes:
    get:
      summary: Get votes for a specific candidate
      parameters:
        - name: candidateId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of votes for the candidate
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateVote'

  /candidates/wallets:
    get:
      summary: Get all candidate wallets
      responses:
        '200':
          description: List of candidate wallets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateWallet'
    post:
      summary: Create candidate wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateWalletSubmission'
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateWallet'

  /candidates/wallets/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update candidate wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateWalletUpdate'
      responses:
        '200':
          description: Wallet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateWallet'
    delete:
      summary: Delete candidate wallet
      responses:
        '204':
          description: Wallet deleted successfully

  # Burn Routes
  /burn/burnkrc20:
    post:
      summary: Burn KRC20 tokens
      description: Burns specified amount of KRC20 tokens from a wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletId
                - amount
              properties:
                walletId:
                  type: integer
                amount:
                  type: number
      responses:
        '200':
          description: Tokens burned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string

  /burn/burnkaspa:
    post:
      summary: Burn KASPA
      description: Burns specified amount of KASPA from a wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletId
                - amount
              properties:
                walletId:
                  type: integer
                amount:
                  type: number
      responses:
        '200':
          description: KASPA burned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string

  /burn/returnkaspa:
    post:
      summary: Return GOV KASPA
      description: Returns GOV KASPA to specified wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletId
              properties:
                walletId:
                  type: integer
      responses:
        '200':
          description: KASPA returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string

  /burn/dropkasgas:
    post:
      summary: Drop KasGas
      description: Drops KasGas to specified wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletId
              properties:
                walletId:
                  type: integer
      responses:
        '200':
          description: KasGas dropped successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: string

  /burn/burnyeswallet:
    post:
      summary: Burn Yes Wallet
      description: Burns the Yes wallet
      responses:
        '200':
          description: Yes wallet burned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string

  /burn/burnnowallet:
    post:
      summary: Burn No Wallet
      description: Burns the No wallet
      responses:
        '200':
          description: No wallet burned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string

  # Nomination Fee Routes
  /nominationFee:
    get:
      summary: Get nomination fee
      description: Get the current nomination fee amount
      responses:
        '200':
          description: Nomination fee details
          content:
            application/json:
              schema:
                type: object
                properties:
                  fee:
                    type: number
                  currency:
                    type: string

  /verifyNominationTransaction:
    post:
      summary: Verify nomination transaction
      description: Verifies a nomination transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transactionId
              properties:
                transactionId:
                  type: string
      responses:
        '200':
          description: Transaction verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                  details:
                    type: object

components:
  schemas:
    ProposalSubmission:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        wallet:
          type: integer
          nullable: true

    ProposalUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        reviewed:
          type: boolean
        approved:
          type: boolean
        passed:
          type: boolean
        votesActive:
          type: boolean
        status:
          type: integer
        
    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: object

    ProposalStatus:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created:
          type: string
          format: date-time

    ProposalStatusSubmission:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    ProposalStatusUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    ProposalType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created:
          type: string
          format: date-time

    ProposalTypeSubmission:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    ProposalTypeUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    ProposalSnapshot:
      type: object
      properties:
        id:
          type: integer
        proposal_id:
          type: integer
        data:
          type: object
        generated:
          type: string
          format: date-time

    ProposalSnapshotSubmission:
      type: object
      required:
        - proposal_id
        - data
      properties:
        proposal_id:
          type: integer
        data:
          type: object

    ProposalSnapshotUpdate:
      type: object
      required:
        - data
      properties:
        data:
          type: object

    ProposalVote:
      type: object
      properties:
        id:
          type: integer
        proposal_id:
          type: integer
        wallet_id:
          type: integer
        vote_type:
          type: string
        amount:
          type: number
        created:
          type: string
          format: date-time

    ProposalVoteSubmission:
      type: object
      required:
        - proposal_id
        - wallet_id
        - vote_type
        - amount
      properties:
        proposal_id:
          type: integer
        wallet_id:
          type: integer
        vote_type:
          type: string
        amount:
          type: number

    ProposalYesVote:
      type: object
      properties:
        id:
          type: integer
        proposal_id:
          type: integer
        wallet_id:
          type: integer
        amount:
          type: number
        created:
          type: string
          format: date-time

    ProposalYesVoteSubmission:
      type: object
      required:
        - proposal_id
        - wallet_id
        - amount
      properties:
        proposal_id:
          type: integer
        wallet_id:
          type: integer
        amount:
          type: number

    ProposalYesVoteUpdate:
      type: object
      properties:
        amount:
          type: number

    ProposalNoVote:
      type: object
      properties:
        id:
          type: integer
        proposal_id:
          type: integer
        wallet_id:
          type: integer
        amount:
          type: number
        created:
          type: string
          format: date-time

    ProposalNoVoteSubmission:
      type: object
      required:
        - proposal_id
        - wallet_id
        - amount
      properties:
        proposal_id:
          type: integer
        wallet_id:
          type: integer
        amount:
          type: number

    ProposalNoVoteUpdate:
      type: object
      properties:
        amount:
          type: number

    Election:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        type:
          type: integer
        status:
          type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        created:
          type: string
          format: date-time

    ElectionSubmission:
      type: object
      required:
        - title
        - description
        - type
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time

    ElectionType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created:
          type: string
          format: date-time

    ElectionTypeSubmission:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    ElectionTypeUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    ElectionStatus:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created:
          type: string
          format: date-time

    ElectionStatusSubmission:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    ElectionStatusUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    CandidateVote:
      type: object
      properties:
        id:
          type: integer
        candidateId:
          type: integer
        walletId:
          type: integer
        amount:
          type: number
        created:
          type: string
          format: date-time

    CandidateWallet:
      type: object
      properties:
        id:
          type: integer
        address:
          type: string
        created:
          type: string
          format: date-time

    CandidateWalletSubmission:
      type: object
      required:
        - address
      properties:
        address:
          type: string

    CandidateWalletUpdate:
      type: object
      properties:
        address:
          type: string

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
